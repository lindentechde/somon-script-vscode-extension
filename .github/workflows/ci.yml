name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install root dependencies
        run: npm ci
      
      - name: Install client dependencies
        run: cd client && npm ci
      
      - name: Install server dependencies
        run: cd server && npm ci
      
      - name: Clean build artifacts
        run: |
          rm -rf client/out
          rm -rf server/out
          rm -rf *.tsbuildinfo
          rm -rf client/*.tsbuildinfo
          rm -rf server/*.tsbuildinfo
      
      - name: Compile TypeScript
        run: npm run compile
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            client/out
            server/out
          retention-days: 7

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install root dependencies
        run: npm ci
      
      - name: Install client dependencies
        run: cd client && npm ci
      
      - name: Install server dependencies
        run: cd server && npm ci
      
      - name: Run ESLint
        run: npm run lint

  test:
    name: test
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install root dependencies
        run: npm ci
      
      - name: Install client dependencies
        run: cd client && npm ci
      
      - name: Install server dependencies
        run: cd server && npm ci
      
      - name: Clean build artifacts
        run: |
          rm -rf client/out
          rm -rf server/out
          rm -rf *.tsbuildinfo
          rm -rf client/*.tsbuildinfo
          rm -rf server/*.tsbuildinfo
      
      - name: Compile TypeScript
        run: npm run compile
      
      - name: Run tests (Linux)
        run: xvfb-run -a npm test
        if: runner.os == 'Linux'
      
      - name: Run tests (Windows/macOS)
        run: npm test
        if: runner.os != 'Linux'

  version-bump:
    name: Version Bump
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'pull_request' && (github.event.pull_request.base.ref == 'main' || github.event.pull_request.base.ref == 'master')
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check if version bump is needed
        id: check-version
        run: |
          # Check if the last commit already has [skip ci] or is a version bump
          LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
          if echo "$LAST_COMMIT_MSG" | grep -qiE "\[skip ci\]|\[ci skip\]|chore: bump version"; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Version already bumped in last commit, skipping"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine version bump type
        if: steps.check-version.outputs.skip == 'false'
        id: bump-type
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_LABELS="${{ join(github.event.pull_request.labels.*.name, ',') }}"
          
          # Check PR labels first
          if echo "$PR_LABELS" | grep -q "major"; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif echo "$PR_LABELS" | grep -q "minor"; then
            echo "type=minor" >> $GITHUB_OUTPUT
          elif echo "$PR_LABELS" | grep -q "patch"; then
            echo "type=patch" >> $GITHUB_OUTPUT
          # Check PR title for conventional commits
          elif echo "$PR_TITLE" | grep -qiE "^(feat|feature)(\(.+\))?!:"; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif echo "$PR_TITLE" | grep -qiE "^(feat|feature)(\(.+\))?:"; then
            echo "type=minor" >> $GITHUB_OUTPUT
          elif echo "$PR_TITLE" | grep -qiE "^(fix|bugfix|perf|refactor|docs|style|test|chore)(\(.+\))?:"; then
            echo "type=patch" >> $GITHUB_OUTPUT
          else
            # Default to patch if no indicator found
            echo "type=patch" >> $GITHUB_OUTPUT
          fi

      - name: Bump version
        if: steps.check-version.outputs.skip == 'false'
        run: |
          npm run version:${{ steps.bump-type.outputs.type }}
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit and push version bump
        if: steps.check-version.outputs.skip == 'false'
        run: |
          git add package.json
          git commit -m "chore: bump version to ${{ env.NEW_VERSION }} [skip ci]"
          git push origin HEAD:${{ github.event.pull_request.head.ref }}

      - name: Comment on PR
        if: steps.check-version.outputs.skip == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸŽ‰ Version bumped to `${{ env.NEW_VERSION }}` after tests passed successfully!'
            })
